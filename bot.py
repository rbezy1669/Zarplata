import asyncio
import logging
import requests
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)
from collections import defaultdict

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

CLOSE_SUM, CHOOSE_RATE, MANUAL_RATE, DROP_PERCENT, CALL_PEOPLE = range(5)

_cached_usd = None
_cached_date = None

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ (–≤ –ø–∞–º—è—Ç–∏, –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞)
user_history = defaultdict(list)


async def get_usd_rate():
    global _cached_usd, _cached_date
    today = datetime.now().date()
    if _cached_usd and _cached_date == today:
        return _cached_usd
    try:
        loop = asyncio.get_event_loop()

        def fetch():
            res = requests.get(
                "https://www.cbr-xml-daily.ru/daily_json.js", timeout=5)
            res.raise_for_status()
            data = res.json()
            return data["Valute"]["USD"]["Value"]
        usd = await loop.run_in_executor(None, fetch)
        _cached_usd = usd
        _cached_date = today
        return usd
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        return 80.0


async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [["/cancel"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text("üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫—Ä—ã–≤–∞ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=keyboard)
    return CLOSE_SUM


async def get_close_sum(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        rub = float(update.message.text.replace(",", "."))
        ctx.user_data["rub"] = rub
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        return CLOSE_SUM

    keyboard = ReplyKeyboardMarkup(
        [["üìà –ö—É—Ä—Å –¶–ë", "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"], ["/cancel"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text("üí± –ü–æ –∫–∞–∫–æ–º—É –∫—É—Ä—Å—É —Å—á–∏—Ç–∞—Ç—å –¥–æ–ª–ª–∞—Ä?", reply_markup=keyboard)
    return CHOOSE_RATE


async def use_cbr_rate(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    rate = await get_usd_rate()
    rub = ctx.user_data["rub"]
    usd = rub / rate
    ctx.user_data.update({"rate": rate, "usd": usd})
    keyboard = ReplyKeyboardMarkup(
        [["/cancel"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        f"üìà –ö—É—Ä—Å –¶–ë –†–§: 1 $ = {rate:.2f} ‚ÇΩ\n"
        f"üíµ –≠—Ç–æ: {usd:.2f}$\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥—Ä–æ–ø–∞:",
        reply_markup=keyboard
    )
    return DROP_PERCENT


async def ask_manual_rate(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [["/cancel"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 87.52):", reply_markup=keyboard)
    return MANUAL_RATE


async def set_manual_rate(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        rate = float(update.message.text.replace(",", "."))
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å:")
        return MANUAL_RATE

    rub = ctx.user_data["rub"]
    usd = rub / rate
    ctx.user_data.update({"rate": rate, "usd": usd})
    keyboard = ReplyKeyboardMarkup(
        [["/cancel"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        f"‚úÖ –ö—É—Ä—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1 $ = {rate:.2f} ‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥—Ä–æ–ø–∞:",
        reply_markup=keyboard
    )
    return DROP_PERCENT


async def get_drop_percent(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        drop = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:")
        return DROP_PERCENT
    usd = ctx.user_data["usd"]
    after_drop = usd * (1 - drop / 100)
    ctx.user_data.update({"drop": drop, "after_drop": after_drop})
    keyboard = ReplyKeyboardMarkup(
        [["/cancel"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        f"üìâ –ü–æ—Å–ª–µ –¥—Ä–æ–ø–∞ –Ω–∞ {drop:.1f}%: {after_drop:.2f}$\n"
        "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—ã–ª–æ –≤ —Ç—Ä—É–±–∫–µ? (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",
        reply_markup=keyboard
    )
    return CALL_PEOPLE


async def get_call_people(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è:")
        return CALL_PEOPLE
    ppl = int(text)
    after_drop = ctx.user_data["after_drop"]
    my_share = after_drop * 0.25
    per_person = my_share / ppl
    rate = ctx.user_data["rate"]
    rub_earned = per_person * rate
    from datetime import datetime
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    result = (
        f"‚úÖ –ò—Ç–æ–≥–∏ —Ä–∞—Å—á—ë—Ç–∞ ({now}):\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ –¥—Ä–æ–ø–∞ ({ctx.user_data['drop']:.1f}%): {after_drop:.2f}$\n"
        f"‚Ä¢ –ú–æ—è –¥–æ–ª—è (25%): {my_share:.2f}$\n"
        f"‚Ä¢ –õ—é–¥–µ–π: {ppl}\n"
        f"‚Ä¢ –¢–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {per_person:.2f}$ (~{rub_earned:.2f}‚ÇΩ)"
    )

    if per_person < 30:
        result += "\n\nü§° –≠—Ç–æ –≤—Å—ë? –ü–æ—Ä–∞ –≤ –Ω–∞–π–º!"
    elif per_person > 100:
        result += "\n\nü§ë –¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ–ª—å –∑–≤–æ–Ω–∫–∞!"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 50 –∑–∞–ø–∏—Å–µ–π
    if len(user_history[user_id]) >= 50:
        user_history[user_id].pop(0)
    user_history[user_id].append(result)
    # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞
    await update.message.reply_text(result, reply_markup=ReplyKeyboardRemove())
    keyboard = ReplyKeyboardMarkup(
        [["/start", "/history"]],
        resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    return ConversationHandler.END


async def help_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–∞.\n"
        "2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞.\n"
        "3. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç –∫–æ–º–∞–Ω–¥–æ–π /cancel.\n"
        "4. –ò—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ /history.\n"
        "5. –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clearhistory.\n"
        "6. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞—á–∞—Ç—å ‚Äî /start.\n"
    )
    await update.message.reply_text(text, parse_mode="HTML")


async def clearhistory(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_history[user_id].clear()
    await update.message.reply_text("üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")


async def history(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    history_list = user_history.get(user_id, [])
    if not history_list:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    text = "\n\n".join(history_list[-10:])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) > 4000:
        text = text[-4000:]
    await update.message.reply_text(f"üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—á—ë—Ç—ã:\n\n{text}")


async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


def main():
    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
    token = "7552375610:AAENfgPDX6Dvlh6IwXr5R4vBusPWrPfyxh0"
    # ...existing code...

    try:
        app = Application.builder().token(token).build()

        conv = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                CLOSE_SUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_close_sum)],
                CHOOSE_RATE: [
                    MessageHandler(filters.Regex("^üìà –ö—É—Ä—Å –¶–ë$"), use_cbr_rate),
                    MessageHandler(filters.Regex(
                        "^‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é$"), ask_manual_rate)
                ],
                MANUAL_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_manual_rate)],
                DROP_PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_drop_percent)],
                CALL_PEOPLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_call_people)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            allow_reentry=True
        )

        app.add_handler(conv)
        app.add_handler(CommandHandler("cancel", cancel))
        app.add_handler(CommandHandler("history", history))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("clearhistory", clearhistory))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
    main()
